# A function to get the distance of each lobster from the trap
# By default the trap is at (5,5)
# The function needs the x and y coordinate of the lobster
# adding trap location makes it generic
distanceToTrapCalculator<- function(Lobster,trap = x(5,5)){
xLobster = Lobster[1]
yLobster = Lobster[2]
xtrap = trap[1]
ytrap = trap[2]
distanceToTrap<- sqrt((xLobster - xtrap)^2 + (yLobster -ytrap)^2)
return(distanceToTrap)
}
View(distanceToTrapCalculator)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?rnbinom
?rpois
rbinom()
?rbinom
# This function generates either a Poisson or a negative binomial distribition of lobsters on the sea bed
#' @param n is the number of observations
#' @param lambda is the mean
#' @param D is
#' @return a list of new location for each individual lobster
#' @export
rpoisD<-function (n, lambda,D=1) {
if (D==1){
rpois(n, lambda)
}  else {
sz = lambda^2/(D*lambda-lambda)
rnbinom(n, size=sz, mu=lambda)
}
}
rpoisD(4, 0.1, 1)
devtools::document()
View(rpoisD)
devtools::document()
devtools::document()
?which.min
?apply
?unlist
devtools::document()
seq(5,7,length.out = 10)
devtools::document()
devtools::document()
devtools::document()
usethat::use_vignette("introduction")
install.packages("usethat")
devtools::use_vignette("introduction")
devtools::load_all()
devtools::install()
library(trapCatch)
library(lobsterCatch)
devtools::install_github("tinyheero/tinyutils", upgrade_dependencies = FALSE)
no
source("https://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
biocLite("Rsamtools")
source("https://bioconductor.org/biocLite.R")
install.packages("Bioconductor ")
biocLite("GenomicRanges")
source("https://bioconductor.org/biocLite.R")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install()
biocLite("Rsamtools")
biocLite("GenomicRanges")
source("https://bioconductor.org/biocLite.R")
library("tinyutils")
ls("package:tinyutils")
plot_feature_sample_mat
devtools::install_github("vpourfaraj/lobsterCatch")
devtools::install_github("vpourfaraj/lobsterCatch")
devtools::install_github("vpourfaraj/lobsterCatchPackage")
?catchability
# In order to load the latest version of the package:
devtools::install_github('vpourfaraj/lobsterCatch',ref='main')
#Once the package is installed, data in extdata folder can be accessed using this code:
system.file("extdata", "LobsterSizeFreqs.csv", package = "lobsterCatch")
p = list()
p$nrowgrids = 10
p$ncolgrids = 10
p$ngrids=p$nrowgrids * p$ncolgrids
p$initlambda=.1
p$initD = 3
p$smult = 0.993
p$currentZoIInit = 1
p$trapSaturationStart = T
p$trapEastStart = c(5,3,4)
p$trapNorthStart = c(5,3,4)
p$ntrapsstart = length(p$trapEastStart)
p$saturationThresholdStart = 5
p$how_closeStart = 1
p$dstepstart = 5
p$niter =100
#run the model
a = SimulateLobsterMovement(p=p)
library(lobsterCatch)
p = list()
p$nrowgrids = 10
p$ncolgrids = 10
p$ngrids=p$nrowgrids * p$ncolgrids
p$initlambda=.1
p$initD = 3
p$smult = 0.993
p$currentZoIInit = 1
p$trapSaturationStart = T
p$trapEastStart = c(5,3,4)
p$trapNorthStart = c(5,3,4)
p$ntrapsstart = length(p$trapEastStart)
p$saturationThresholdStart = 5
p$how_closeStart = 1
p$dstepstart = 5
p$niter =100
#run the model
a = SimulateLobsterMovement(p=p)
p = list()
p$nrowgrids = 10
p$ncolgrids = 10
p$ngrids=p$nrowgrids * p$ncolgrids
p$initlambda=.1
p$initD = 3
p$smult = 0.993
p$currentZoIInit = 1
p$trapSaturationStart = T
p$trapEastStart = c(5,3,4)
p$trapNorthStart = c(5,3,4)
p$ntrapsstart = length(p$trapEastStart)
p$saturationThresholdStart = 5
p$how_closeStart = 1
p$dstepstart = 5
p$niter =100
#run the model
a = SimulateLobsterMovement(p=p)
p$realizations=20
#run the model
a = SimulateLobsterMovement(p=p)
require(devtools)
require(geosphere)
?load_all
arena = matrix(0,12,12)
y=x=seq(1,11,2)
traps = expand.grid(x,y)
arena
y
traps
p = list()
p$nrowgrids = 12
p$ncolgrids = 12
p$ngrids=p$nrowgrids * p$ncolgrids
p$initlambda=.1
p$initD = 3
p$smult = 0.993
p$currentZoIInit = 1
p$trapEastStart = traps[,1]
p$trapNorthStart = traps[,2]
p$ntrapsstart = length(p$trapEastStart)
p$saturationThresholdStart = 5
p$how_closeStart = .1
p$dstepstart = 5
p$trapSaturationStart = T
p$tSteps = 50
p$realizations = 1
a = SimulateLobsterMovement(p=p)
#nLobsters
uL = unique(a[[1]]$lobsters$I)
uL
dims = length(uL)
dims
dims = ceiling(sqrt(dims))
par( mfrow=c(dims,dims) ) # create a plot with 1 row and 2 columns to show plots side by side
for(i in uL){
with(subset(a[[1]]$lobsters, I==1),plot(EASTING, NORTHING, type='l',ylim=c(-30,30),xlim=c(-30,30)))
points(traps, pch=16, col='red')
#with(subset(outmove, I==1), text(x=EASTING[c(1,100)], y=NORTHING[c(1,100)], c('Start','End')))
}
smm = seq(0.8,.99,by=0.02)
gg = list()
for(i in 1:length(smm)){
p$smult=smm[i]
a = SimulateLobsterMovement(p=p)
gg[[i]]=c(mean(apply(a[[1]]$traps,2,max)),dispersion(apply(a[[1]]$traps,2,max)))
}
