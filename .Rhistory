library(nycflights13)
library(tidyverse)
library(nycflights13)
library(tidyverse)
nycflights13::flights
flights
head(flights)
?flights
view(flights)
filter(flights)
filter(flights, year=!2013)
filter(flights, year!=2013)
filter(flights, year==2014)
filter(flights, month == 1, day==2)
filter(flights, month=c(11,12))
filter(flights, month==c(11,12))
filter(flights, month==11 | month=12))
filter(flights, month==11 | month==12))
filter(flights, month==11 | month==12))
filter(flights, month==11 | month==12)
filter(flights, month %in% c(11,12))
filter(flights, dep_delay< 120 | arr_delay <120)
filter(flights, dest=="IAH" | dest="HOU")
filter(flights, dest=="IAH" | dest="HOU")
filter(flights, dest=="IAH" | dest=="HOU")
texas<- filter(flights, dest=="IAH" | dest=="HOU")
levels(texas$dest)
texas$dest
sqrt(1002/pi)
arrange(flights, desc(dep_time))
arrange(flights, desc(is.na(dep_delay)))
arrange(flights, desc(is.na()))
arrange(flights, desc(is.na))
arrange(flights, desc(is.na(month)))
rename(flights, year=sal)
rename(flights, sal=year)
flights
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
flights_sml
?mutate
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
flights_sml
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
)
517 %/% 100
517 %% 100
library(flights)
library(nycflights13)
nycflights13::flights
head(flights)
library(dplyr)
# distance ~ average delay
by_dest<- group_by(flights, dest)
by_dest
head(by_dest)
View(by_dest)
delay<- summarise(by_dest
count= n(),
dist= mean(distance, na.rm = TRUE
delay = mean(arr_delay, na.rm=TRUE)
)
delay<- summarise(by_dest
count= n(),
dist= mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm=TRUE)
)
delay<- summarise(by_dest,
count= n(),
dist= mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm=TRUE)
)
delay
library(raster)
library(ggplot2)
library(reshape2)
# A function to get the distance of each lobster from the trap
# By default the trap is at (5,5)
# The function needs the x and y coordinate of the lobster
# adding trap location makes it generic
distanceToTrapCalculator<- function(xLobster, yLobster,xtrap=5, ytrap=5){
distanceToTrap<- sqrt((xLobster - xtrap)^2 + (yLobster -ytrap)^2)
return(distanceToTrap)
}
randomMove<- function(xLobster, yLobster, dStep){
randomAngle<- runif(n=1, min = 0, max=360) #selects a random angle of direction
xNew<- dStep * sin(randomAngle * pi / 180) + xLobster #moves dStep based on the angle
yNew<- dStep * cos(randomAngle * pi / 180) + yLobster
# Check if the lobster is located outside of the grid
# I think its ok for them to move outside the grid, so might not be necessary to have this step
if(xNew < 0 ){
xNew <- 0
}
if(xNew > 10 ){
xNew <- 10
}
if(yNew < 0 ){
yNew <- 0
}
if(yNew > 10 ){
yNew <- 10
}
return( list(EASTING = xNew, NORTHING = yNew) )
}
randomMove<- function(xLobster, yLobster, dStep){
randomAngle<- runif(n=1, min = 0, max=360) #selects a random angle of direction
xNew<- dStep * sin(randomAngle * pi / 180) + xLobster #moves dStep based on the angle
yNew<- dStep * cos(randomAngle * pi / 180) + yLobster
return( list(EASTING = xNew, NORTHING = yNew) )
}
?F
install.packages("geosphere")
library(geosphere)
?bearing
?abs
abs(4)
abs(6.2)
#### initial coordinate of lobsters is simulated (written by Adam Cook)
rpoisD<-function (n, lambda,D=1) {
if (D==1){
rpois(n, lambda)
}  else {
sz = lambda^2/(D*lambda-lambda) #this puts the overdispersion in terms of lambda or the mean and gives you appropriate size for negbin
rnbinom(n, size=sz, mu=lambda)
}
}
#density per grid 100 grids
# each element in the vector represents the starting value in each grid
initialGrid = rpoisD(n=100,lambda=.1, D = 3)
# setting up Grid extents
xmin=0
ymin=0
xmax=10
ymax=10
grid_extent=extent(xmin, xmax, ymin, ymax)
# Create grid and get xy coordinates from which random points(lobsters) are extracted
simulated_raster <- raster(ext=grid_extent, resolution=1)
values(simulated_raster)= initialGrid # initial density of lobsters is given to raster
simulated_raster
# Extract cell centre coordinates
x_centres=xFromCol(simulated_raster)
y_centres=yFromRow(simulated_raster)
View(simulated_raster)
class(simulated_raster)
?bearing
library(raster)
library(ggplot2)
library(reshape2)
library(geosphere)
library(geosphere)
# A function to get the distance of each lobster from the trap
# By default the trap is at (5,5)
# The function needs the x and y coordinate of the lobster
# adding trap location makes it generic
distanceToTrapCalculator<- function(xLobster, yLobster,xtrap=5, ytrap=5){
distanceToTrap<- sqrt((xLobster - xtrap)^2 + (yLobster -ytrap)^2)
return(distanceToTrap)
}
randomMove<- function(xLobster, yLobster, dStep){
randomAngle<- runif(n=1, min = 0, max=360) #selects a random angle of direction
xNew<- dStep * sin(randomAngle * pi / 180) + xLobster #moves dStep based on the angle
yNew<- dStep * cos(randomAngle * pi / 180) + yLobster
# Check if the lobster is located outside of the grid
# I think its ok for them to move outside the grid, so might not be necessary to have this step
return( list(EASTING = xNew, NORTHING = yNew) )
}
directionalMove<- function(xLobster, yLobster, dStep, distanceToTrap, xtrap=5, ytrap=5,radius_of_influence=15,ZoI=0){
# Calculating tethaT, !!!!!!!! the concept of angle to trap (ask Adam!)
#it looks like the quadrant of lobster matters here?
#AMC - it shouldn't matter, I would just use the bearing function from geosphere package to get thetaT
# Calculating tethaR
b <- 0.1 + (0.9 * distanceToTrap) / radius_of_influence
if( b > 1){
b < - 1
}
u          <- runif( n = 1, min = 0, max = 1 )
sign       <- sample( c(1,-1), size = 1, replace = TRUE)
tethaR     <- sign * 180 * u^(1/b)  ##AMC I think we need to talk about thetaR, this is not how I interpreted the paper
AMCthetaR =F
if(AMCthetaR){
#ZoI is adjusted each time step for decay (shrinkage) of radius of influence (equation 3)
b = 1 + 0.9 * (distanceToTrap - ZoI) / radius_of_influence
theta_R = -180:180
P = 1/(180^b) * abs(tethaT) ^ b
Prtheta_R = (1-P) / sum(1-P)
theta_r = sample(theta_R,size = 1, prob=Prtheta_R)
}
tetha      <- tethaT + tethaR
xNew   <- dStep * sin(tetha * pi / 180) + xLobster
yNew   <- dStep * cos(tetha * pi / 180) + yLobster
# Check if the lobster is going to be outside of the grid
#AMC again I think its ok for lobsters to move outside grid
if(xNew < 0 ){
xNew <- 0
}
if(xNew > 10 ){
xNew <- 10
}
if(yNew < 0 ){
yNew <- 0
}
if(yNew > 10 ){
yNew <- 10
}
return( list(EASTING = xNew, NORTHING = yNew) )
}
AMCthetaR =F
if(AMCthetaR){
#ZoI is adjusted each time step for decay (shrinkage) of radius of influence (equation 3)
b = 1 + 0.9 * (distanceToTrap - ZoI) / radius_of_influence
theta_R = -180:180
P = 1/(180^b) * abs(tethaT) ^ b
Prtheta_R = (1-P) / sum(1-P)
theta_r = sample(theta_R,size = 1, prob=Prtheta_R)
}
tetha      <- tethaT + tethaR
?bearing
library(raster)
library(ggplot2)
library(reshape2)
library(geosphere)
1:3 + 1:10
1:3 + 1:3
library(nycflights13)
library(tidyverse)
group_by(flights, dest)
delay<- summarise(byDest,
count= n(),
dist = mean(distance), na.rm=TRUE
delay= mean(arr_delay, na.rm=TRUE)
)
delay<- summarise(byDest,
count= n(),
dist = mean(distance, na.rm=TRUE),
delay= mean(arr_delay, na.rm=TRUE)
)
byDest<- group_by(flights, dest)
delay<- summarise(byDest,
count= n(),
dist = mean(distance, na.rm=TRUE),
delay= mean(arr_delay, na.rm=TRUE)
)
delay
delay1<- summarise(byDest,
count= n(),
dist = mean(distance, na.rm=TRUE),
delay= mean(arr_delay, na.rm=TRUE)
)
delay1
l
delay<- summarise(byDest,
count= n(),
dist = mean(distance, na.rm=TRUE),
delay= mean(arr_delay, na.rm=TRUE)
)
ggplot(data = delay, mapping = aes(x = dist, y = delay)) +
geom_point(aes(size = count), alpha = 1/3) +
geom_smooth(se = FALSE)
delays<- flights %>%
group_by(dest)
delays<- flights %>%
group_by(dest) %>%
summarise(
count= n(),
dist = mean(distance, na.rm=TRUE),
delay= mean(arr_delay, na.rm=TRUE)
)
delays
delays<- flights %>%
group_by(dest) %>%
summarise(
count= n(),
dist = mean(distance, na.rm=TRUE),
delay= mean(arr_delay, na.rm=TRUE)
) %>%
filter(count>20 , dest !="HNl")
delays
not_cancelled<- flights %>%
filter(dep_delay != NA)
not_cancelled<- flights %>%
filter(dep_delay != NA)
not_cancelled
not_cancelled<- flights %>%
filter(dep_delay != NA , arr_delay != NA)
not_cancelled
not_cancelled<- flights %>%
filter((dep_delay) != NA , (arr_delay) != NA)
not_cancelled
library(nycflights13)
not_cancelled<- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay= mean(arr_delay)
)
delays
ggplot(data = delays, mapping = aes(x = delay))
+
geom_freqpoly(binwidth = 10)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 20)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 100)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay= mean(arr_delay)
n = n()
)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay= mean(arr_delay, na.rm = TRUE),
n = n()
)
delays
ggplot(data = delays, mapping = aes(x= n ,y = delay)) +
geom_point(alpha = 0.10)
delays %>%
filter (n >25) %>%
ggplot(mapping = aes(x= n ,y = delay)) +
geom_point(alpha = 0.10)
delays %>%
filter (n >25) %>%
ggplot(mapping = aes(x= n ,y = delay)) +
geom_point(alpha = 0.10)
delays %>%
filter (n >25) %>%
ggplot(mapping = aes(x= n ,y = delay)) +
geom_point(alpha = 0.10)
delays %>%
filter (n >25) %>%
ggplot(mapping = aes(x= n ,y = delay)) +
geom_point(alpha = 0.10)
delays %>%
filter (n >50) %>%
ggplot(mapping = aes(x= n ,y = delay)) +
geom_point(alpha = 0.10)
delays %>%
filter (n >50) %>%
ggplot(mapping = aes(x= n ,y = delay)) +
geom_point(alpha = 0.10)
install.packages("Lahman")
library(Lahman)
batting <- as_tibble(Lahman::Batting)
batting
install.packages(c("processx", "ps", "rlang", "testthat", "xfun"))
devtools::install_github("vpourfaraj/lobsterCatch")
library(lobsterCatch)
?rpoisD
log(1000)
log10(1000)
exp(1)
length(tmp)
tmp<- c(7,2,3,5,4)
length(tmp)
i=2
squared[i]<- tmp[i]^2
for(i in 1:length(tmp)){
squared[i]<- tmp[i]^2
print(squared)
}
squared<- c()
for(i in 1:length(tmp)){
squared[i]<- tmp[i]^2
print(squared)
}
m <- rbind(c(15,6,2),c(30,15,5))
m
m
m <- rbind(c(15,6,2),c(30,15,5))
for(i in 1:nrow(m)){
totalcatch [i] <- sum(m[i,])
}
totalcatch<- c()
m <- rbind(c(15,6,2),c(30,15,5))
for(i in 1:nrow(m)){
totalcatch [i] <- sum(m[i,])
}
totalcatch
apply(m,1,sum)
apply(m,2,sum)
help.search("apply")
RSiteSearch("Mark-Recapture",restrict="functions")
install_github('vpourfaraj/lobsterCatch',ref='main', force = TRUE)
library(devtools)
install_github('vpourfaraj/lobsterCatch',ref='main', force = TRUE)
library(lobsterCatch)
?catchability
library(devtools)
install_github('vpourfaraj/lobsterCatch',ref='main', force = TRUE)
library(lobsterCatch)
?catchability
?catchability
library(devtools)
install_github('vpourfaraj/lobsterCatch',ref='main', force = TRUE)
library(lobsterCatch)
?catchability
setwd("C:/gitVahab/lobsterCatch")
